source("helpers.R")
install.packages("perm")
source("helpers.R")
theme_set(theme_bw())
# data was cleaned in a separate document and saved
liyab <- readRDS("data/liyab.RDS") %>%
mutate(salary = as.numeric(as.character(salary)))
ggplot(liyab, aes(x = salary)) +
geom_histogram(bins = 50) +
labs(title = "Histogram of Monthly Salary", x = "Monthly salary, in PHP", y = "Count")
liyab <- liyab %>%
mutate(log_salary = log(salary, 10))
ggplot(liyab, aes(x = log_salary)) +
geom_histogram(bins = 50) +
labs(title = "Histogram of Monthly Log-Salary", x = "log_10(Monthly salary), in PHP", y = "Count")
# factoring gender
liyab_gender <- liyab$is_male * 1 + liyab$is_female * 2
liyab_gender <- as.factor(liyab_gender)
liyab_gender <- factor(liyab_gender, levels = c(1:2,0))
liyab$genderfactor <- as.factor(liyab_gender)
levels(liyab$genderfactor) <- c("Male", "Female", "Other")
# factoring gender
liyab_gender <- liyab$is_male * 1 + liyab$is_female * 2
liyab_gender <- as.factor(liyab_gender)
liyab_gender <- factor(liyab_gender, levels = c(1:2,0))
liyab$gender <- as.factor(liyab_gender)
levels(liyab$gender) <- c("Male", "Female", "Other")
ggplot(data = liyab) +
geom_bar(aes(x = year)) +
labs(y = "Count", x = "Year", title = "Barplot of Years")
liyab_colleges <- liyab$is_admu * 1 + liyab$is_upd * 2 + liyab$is_ust * 3 + liyab$is_dlsu * 4
liyab_colleges <- as.factor(liyab_colleges)
liyab_colleges <- factor(liyab_colleges, levels = c(1:4, 0))
liyab$univ <- as.factor(liyab_colleges)
levels(liyab$univ) <- c("ADMU", "UPD", "UST", "DLSU", "Other")
ggplot(liyab, aes(x = gender, y = log_salary)) +
geom_boxplot() +
labs(title = "Boxplots of Log-Salary On Gender", x = "Gender", y = "Log-Salary")
gender_var <- sapply(
levels(liyab$gender),
function(x) {
liyab %>%
filter(gender == x) %>%
.$log_salary %>%
var()
}
)
ggplot(data=liyab, aes(univ, log_salary)) +
geom_boxplot() +
labs(
y = "log(Salary)",
x = "College",
title = "log(Salary) vs University") +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
summary(aov(log_salary ~ univ, data = liyab))
univ_var <- sapply(
levels(liyab$univ),
function(x) {
liyab %>%
filter(univ == x) %>%
.$log_salary %>%
var()
}
)
univ_var <- c(
univ_var,
var(filter(liyab, is.na(liyab$univ))$log_salary))
univ_var[order(univ_var)]
liyab$yearfactor <- as.factor(liyab$year)
# filter out the later years because of lack of data
# 2005 is the year where we first have over 10 observations
#table(liyab$year) > 10
liyab$yearfiltered <- liyab$yearfactor
levels(liyab$yearfiltered)[levels(liyab$yearfiltered) %in% c(1987, 1992, 1998:2005)] <- NA
ggplot(data=liyab, aes(yearfiltered, log_salary)) +
geom_boxplot() +
labs(
y = "log(Salary)",
x = "Year",
title = "log(Salary) distribution vs Year (2006-)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
summary(aov(log_salary ~ yearfiltered, data = liyab))
year_var <- sapply(
levels(liyab$yearfiltered),
function(x) {
liyab %>%
filter(year == x) %>%
.$log_salary %>%
var()
}
)
year_var[order(year_var)]
kruskal.test(log_salary ~ yearfiltered, data = liyab)
liyab$year <- as.numeric(liyab$year)
liyab$negotiate <- as.factor(liyab$negotiate)
summary(baseline_lm <- lm(log_salary ~ year + univ + industry + gender + negotiate, data = liyab))
plot(baseline_lm, which = c(1:3))
#outlier
liyab[2168, 1:7]
library(ggplot2)
theme_set(theme_bw())
# cook's distance calc
liyab <- liyab[-2168,]
# justification for cutting off by year
table(liyab$year)
cutoff = 2009
liyabf <- liyab[liyab$year >= cutoff,]
names(liyab)
summary(liyab$industry)
liyabf$yearfactor <- factor(liyabf$year)
set.seed(139)
# store full dataset in liyab_full
liyab_full <- liyabf
nrow(liyab_full)
# get rid of industries with less than 10 observations
for(i in 1:nrow(liyab_full)){
liyab_industries = table(liyab_full$industry)
if(liyab_industries[names(liyab_industries) == liyab_full$industry[i]] < 10){
liyab_full$industry[i] = "OTHER"
}
}
# create train and test sets
test.id = sample(seq(1,nrow(liyab_full), 1), 540)
liyab_test = liyab_full[test.id,]
liyab_train = liyab_full[-test.id,]
wilcox.test(salary~is_male, liyab_full)
wilcox.test(salary~is_big4, liyab_full)
gender_boot <- readRDS("data/gender_boot.RDS")
big4_boot <- readRDS("data/big4_boot.RDS")
boot.ci(gender_boot, type = c("norm", "basic"))
boot.ci(big4_boot, type = c("norm", "basic"))
permTS(salary~is_male, liyab_full, exact = T)
permTS(salary~is_big4, liyab_full, exact = T)
library(ggplot2)
theme_set(theme_bw())
plot(baseline_lm <- lm(log_salary ~ year + univ + industry + gender + negotiate, data = liyab_train), which = c(4))
liyab_new <- liyab_train
# create a copy without univ, industry, role, gender
# univ, industry, gender oh cos already have indicators
# role, too many to use. will instead use when we "narrow down"
# also remove salary since we will use log
## liyab_new$industry <- NULL
## liyab_new$univ <- NULL
liyab_new$role <- NULL
# liyab_new$gender <- NULL
liyab_new$salary <- NULL
liyab_new$genderfactor <- NULL
liyab_new$yearfactor <- NULL
liyab_new$yearfiltered <- NULL
# turn is vars to indicators
#liyab_new$is_admu <- as.numeric(liyab_new$is_admu)
#liyab_new$is_ust <- as.numeric(liyab_new$is_ust)
#liyab_new$is_upd <- as.numeric(liyab_new$is_upd)
#liyab_new$is_dlsu <- as.numeric(liyab_new$is_dlsu)
# remove is_big4 for now due to strong multicollinearity
#liyab_new$is_big4 <- NULL
# drop the indicators
liyab_new[, 6:52] <- NULL
# transform year by subtracting 2009 so it will be 0 to 11
liyab_new$year <- liyab_new$year - min(liyab_new$year)
# change negotiate to 1 if yes, 0 if no
require(dplyr)
liyab_new <- liyab_new %>%
mutate(negotiate = ifelse(negotiate == "No",0,1))
# making necessary changes to test set
liyab_test <- liyab_test %>%
mutate(negotiate = ifelse(negotiate == "No",0,1))
liyab_test$year <- liyab_test$year - min(liyab_test$year)
liyab_test <- liyab_test[complete.cases(liyab_test), ]
# get only obs without NA
liyab_nona <- liyab_new[complete.cases(liyab_new), ]
# fit sequential models
# only year will have useful polynomial effects
# consider first poly year only
lm_0 <- lm(log_salary~1, data = liyab_nona)
lm_high <- lm(log_salary~I(year) + I(year^2) + I(year^3) + I(year^4), data = liyab_nona)
lm_seq <- step(lm_0, scope = list(lower = lm_0, upper = lm_high),
direction = "both", trace = 0, k = 2)
summary(lm_seq)
# testing to check that there is no significant correlation between university and gender
chisq.test(table(liyab_nona$univ, liyab_nona$gender))
lm_poly <- lm(log_salary~poly(year, degree = 4, raw = TRUE) + (.-year),
data = liyab_nona)
lm_all <- lm(log_salary~., data = liyab_nona)
# above seem to suggest poly is not needed
# and that univ is the most important?
summary(lm_poly)
summary(lm_all)
par(mfrow = c(2, 2))
plot(lm_all)
AIC(lm_poly, lm_all)
BIC(lm_poly, lm_all)
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2)
return(sqrt(SSE/length(y)))
}
RMSE(liyab_test$log_salary, predict(lm_poly, new=liyab_test))
RMSE(liyab_test$log_salary, predict(lm_all, new=liyab_test))
lm_poly_df <- data.frame(name = "lm_poly", rsquared = 0.2858, rmse = 0.1809051, aic = -1396.213, bic = -1145.613)
saveRDS(lm_poly_df, "data/lm_poly_df.RDS")
lm_all_df <- data.frame(name = "lm_all", rsquared = 0.2842, rmse = 0.1804281, aic = -1397.952, bic = -1164.058)
saveRDS(lm_all_df, "data/lm_all_df.RDS")
# now interactions between variables
lm_0 <- lm(log_salary~1, data = liyab_nona)
lm_interact <- lm(log_salary~.^2, data = liyab_nona)
require(glmnet)
lm_seq <- step(lm_0, scope = list(lower = lm_0, upper = lm_interact),
direction = "both", trace = 0)
summary(lm_seq)
cat("Sequential model formula:")
formula(lm_seq)
temp <- BIC(lm_poly, lm_all, lm_interact, lm_seq)
temp
AIC(lm_interact, lm_seq)
summary(lm_interact)
RMSE(liyab_test$log_salary, predict(lm_seq, new=liyab_test))
RMSE(liyab_test$log_salary, predict(lm_interact, new=liyab_test))
lm_seq_df <- data.frame(name = "lm_seq", rsquared = 0.2866, rmse = 0.180255, aic = -1402.411, bic = -1162.9485)
saveRDS(lm_seq_df, "data/lm_seq_df.RDS")
lm_interact_df <- data.frame(name = "lm_interact", rsquared = 0.3924, rmse = 0.1905057, aic = -1233.452, bic = 342.5452)
saveRDS(lm_interact_df, "data/lm_interact_df.RDS")
# Try out mixed-effects model
# Industry as the cluster variable
# Year as cluster variable
library(lmerTest)
require(lme4)
lmer_industry <- lmer(log_salary ~ gender + univ + year + year:gender +
(1|industry),
data = liyab_nona)
lmer_year <- lmer(log_salary~ gender + industry + univ + negotiate +
(1 + gender|year), data = liyab_nona)
summary(lmer_industry)
summary(lmer_year)
library(sjstats)
r2(lmer_industry)
r2(lmer_year)
AIC(lmer_industry, lmer_year)
BIC(lmer_industry, lmer_year)
RMSE(liyab_test$log_salary, predict(lmer_industry, newdata =liyab_test))
RMSE(liyab_test$log_salary, predict(lmer_year, newdata =liyab_test))
summary(liyab_nona)
summary(liyab_test[1:7])
lmer_industry_df <- data.frame(name = "lmer_industry", rsquared = 0.295, rmse = 0.1795364, aic = -1281.677, bic = -1214.8502)
saveRDS(lmer_industry_df, "data/lmer_industry_df.RDS")
lmer_year_df <- data.frame(name = "lmer_year", rsquared = NA, rmse = 0.1812079, aic = -1136.945, bic = -875.2071)
saveRDS(lmer_year_df, "data/lmer_year_df.RDS")
# plot(log_salary~year, data = liyab_nona)
# abline(summary(lmer_industry)$coef[1:2,1], col = 1, lty = 1, lwd = 3)
# abline(summary(lmer_year)$coef[1:2,1], col = 1, lty = 1, lwd = 3)
# for industry
# checking linearity and constant variance
plot(residuals(lmer_industry)~predict(lmer_industry))
# checking normality of residuals
qqnorm(residuals(lmer_industry))
qqline(residuals(lmer_industry))
qqnorm(coef(lmer_industry)$industry[['(Intercept)']])
qqline(coef(lmer_industry)$industry[['(Intercept)']])
# for year
# checking linearity and constant variance
plot(residuals(lmer_year)~predict(lmer_year))
# checking normality of residuals
qqnorm(residuals(lmer_year))
qqline(residuals(lmer_year))
qqnorm(coef(lmer_year)$year[['(Intercept)']])
qqline(coef(lmer_year)$year[['(Intercept)']])
library(glmnet)
set.seed(139)
XInteract = model.matrix(lm_interact)[,-1]
# Ridge model
modelRidge = cv.glmnet(XInteract, liyab_nona$log_salary, alpha = 0, lambda=10^seq(-4,4,0.1))
modelRidge$lambda.min
modelRidge.min = glmnet(XInteract, liyab_nona$log_salary, alpha = 0, lambda=modelRidge$lambda.min)
set.seed(139)
XInteract = model.matrix(lm_interact)[,-1]
# LASSO model
modelLasso = cv.glmnet(XInteract, liyab_nona$log_salary, alpha = 1, lambda=10^seq(-4,4,0.1))
modelLasso$lambda.min
modelLasso.min = glmnet(XInteract, liyab_nona$log_salary, alpha = 1, lambda=modelLasso$lambda.min)
modelLasso$lambda.min
data.frame(ridge=min(modelRidge$cvm),lasso=min(modelLasso$cvm))
plot(modelRidge, main = "Ridge MSEs")
plot(modelLasso, main = "Lasso MSEs")
liyab_testCopy = liyab_test
liyab_testCopy$salary = NULL
liyab_testCopy$role = NULL
liyab_testCopy[6:52] = NULL
liyab_testCopy[7:9] = NULL
lm_interact_testdata = lm(log_salary~(.^2), data = liyab_testCopy)
newX <- model.matrix(lm_interact_testdata)[,-1]
RMSE(liyab_testCopy$log_salary, predict(modelLasso.min, newx = newX))
predict(modelLasso, newx = newX, s = modelLasso$lambda.min)
model_lasso_df <- data.frame(name = "model_lasso", rsquared = NA, rmse = 0.1820608, aic = NA, bic = NA)
saveRDS(model_lasso_df, "data/model_lasso_df.RDS")
for(i in (1:length(rownames(coef(modelLasso.min))))){
if(grepl("univ", rownames(coef(modelLasso.min))[i], fixed = TRUE) == 1 || grepl("gender", rownames(coef(modelLasso.min))[i], fixed = TRUE) == 1){
if(coef(modelLasso.min)[rownames(coef(modelLasso.min))[i], ] != 0){
print(rownames(coef(modelLasso.min))[i])
print(coef(modelLasso.min)[rownames(coef(modelLasso.min))[i], ])
}
}
}
library(randomForest)
set.seed(139)
nrow(liyab_nona)
RFtest.id = sample(seq(1,nrow(liyab_nona), 1), 775)
liyab_testRF = liyab_nona[RFtest.id,]
liyab_trainRF = liyab_nona[-RFtest.id,]
maxnodes.vals = c(2, 5, 10, 50, 100)
mtry.vals = c(1,2,3,4)
rmse.list = matrix(nrow = 5, ncol = 4)
for(j in 1:length(maxnodes.vals)){
for(k in 1:length(mtry.vals)){
model = randomForest(log_salary~., data = liyab_trainRF,
maxnodes = maxnodes.vals[j], mtry= mtry.vals[k], ntree = 100)
rmse.list[j, k] = RMSE(liyab_trainRF$log_salary, model$predicted)
}
}
rmse.list
rf1 = randomForest(log_salary~univ+gender+year+negotiate, data = liyab_trainRF, maxnodes = 50, mtry = 3, ntrees = 50)
RMSE(liyab_trainRF$log_salary, predict(rf1, new=liyab_testRF))
RMSE(liyab_testRF$log_salary, predict(rf1, new=liyab_testRF))
rf1
varImpPlot(rf1, cex = 0.8)
RMSE(liyab_test$log_salary, predict(rf1, new=liyab_test))
model_rf_df <- data.frame(name = "model_rf", rsquared = NA, rmse = 0.1910858, aic = NA, bic = NA)
saveRDS(model_rf_df, "data/model_rf_df.RDS")
temp1 <- readRDS("data/lm_all_df.RDS")
temp2 <- readRDS("data/lm_interact_df.RDS")
temp3 <- readRDS("data/lm_poly_df.RDS")
temp4 <- readRDS("data/lm_seq_df.RDS")
temp5 <- readRDS("data/lmer_industry_df.RDS")
temp6 <- readRDS("data/lmer_year_df.RDS")
temp7 <- readRDS("data/model_lasso_df.RDS")
temp8 <- readRDS("data/model_rf_df.RDS")
modelComps = rbind(temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8)
modelComps
RMSE(liyab_nona$log_salary, predict(lmer_industry, newdata=liyab_nona))
RMSE(liyab_test$log_salary, predict(lmer_industry, newdata=liyab_test))
sort(table(liyab$industry), decreasing = T)
summary(aov(log_salary ~ gender, data = liyab))
gender_var[order(gender_var)]
View(baseline_lm)
summary(baseline_lm)
summary(baseline_lm)
lm_high
summary(modelrf)
varImpPlot(rf1)
rf1
summary(baseline_lm)
summary(baseline_lm)
summary(lm_0)
summary(lm_all)
summary(lm_interact)
summary(lm_seq)
summary(baseline_lm)
summary(lm_all)
summary(lm_seq)
View(liyab_new)
getwd(
)
setwd("/Users/seanty/desktop/prog1")
setwd("/Users/seanty/desktop")
setwd("/Users/seanty/desktop/project1")
df <- read.table("dim2.txt", sep = " ")
View(df)
library(ggplot2)
library(ggplot2)
df <- read.table("dim2.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
View(df)
ggplot(data = df, aes(x = "log n", y = "log_size"))
ggplot(data = df, aes(x = "log n", y = "log_size")) + geom_point() +
geom_smooth(method = "lm")
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm")
View(df)
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
library(ggplot2)
df <- read.table("dim2.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
View(df)
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
library(ggplot2)
df <- read.table("dim3.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
library(ggplot2)
df <- read.table("dim2.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
library(ggplot2)
df <- read.table("dim4.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
library(ggplot2)
df <- read.table("dim0.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
library(ggplot2)
df <- read.table("dim4.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
library(ggplot2)
library(ggplot2)
df <- read.table("dim4.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm") + ggtitle("Plot for dimension 4")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
library(ggplot2)
df <- read.table("dim3.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm") + ggtitle("Plot for dimension 3")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
library(ggplot2)
df <- read.table("dim2.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm") + ggtitle("Plot for dimension 2")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
library(ggplot2)
df <- read.table("dim2.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm") + ggtitle("Plot for dimension 2")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
predict(lm1, data.frame(2^19))
predict(lm1, data.frame(log_n = log(2^19)))
exp(predict(lm1, data.frame(log_n = log(2^19))))
library(ggplot2)
df <- read.table("dim3.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm") + ggtitle("Plot for dimension 2")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
exp(predict(lm1, data.frame(log_n = log(2^19))))
library(ggplot2)
df <- read.table("dim4.txt", sep = " ")
colnames(df) <- c("n", "average_size", "runtime")
df["log_n"] = log(df["n"])
df["log_size"] = log(df["average_size"])
ggplot(data = df, aes(x = log_n, y = log_size)) + geom_point() +
geom_smooth(method = "lm") + ggtitle("Plot for dimension 2")
lm1 <- lm(log_size~log_n, data = df)
summary(lm1)
exp(predict(lm1, data.frame(log_n = log(2^19))))
